@page "/icon-buttons"

<ComponentDemoPage Name="Icon Buttons"
                   DesignUrl="https://m3.material.io/components/icon-buttons/overview"
                   ComponentUrl="https://material-web.dev/components/icon-button/"
                   ComponentSourcePath="iconbutton"
                   BlazorComponentSourcePath="MdIconButton.razor"
                   BlazorDemoSourceName="IconButton">
    <Description>
        Icon buttons help people take supplementary actions with a single tap.
    </Description>
    <ComponentDemo>
        <MarkdownBlock>
            **[Components merging](/features#components-merging)**:
            All button types
            (`md-icon-button`, `md-filled-icon-button`, `md-filled-tonal-icon-button` and `md-outlined-icon-button`)
            are merged into a single `MdIconButton` and you can use
            `ButtonStyle` parameter to set the style.
            `MdIconButtonStyle.Default` is the default value if unset.
        </MarkdownBlock>

        @for (int i = 0; i < 2; i++)
        {
            bool isRtl = i == 1;

            <div>@(isRtl ? $"RTL with {nameof(MdIconButton.FlipIconInRtl)}" : "LTR")</div>

            <div class="row text-center"
                 style="direction: @(isRtl ? "rtl" : "ltr")">
                @foreach (var style in Enum.GetValues<MdIconButtonStyle>())
                {
                    <div class="col">
                        <p>
                            <MdIconButton @bind-Selected="@(selected)" @bind-Selected:after="() => ++toggleCount"
                                          @onclick="@(() => clicked = style.ToString())"
                                          ButtonStyle="@(style)"
                                          Href="@(hasHref ? "https://github.com/datvm/BlazorMaterialWeb/" : null)"
                                          Target="@(hasHref && targetBlank ? "_blank" : null)"
                                          Toggle="@(toggle)"
                                          Disabled="@(disabled)"
                                          FlipIconInRtl="isRtl">
                                <MdIcon>@(icon)</MdIcon>
                            </MdIconButton>
                        </p>
                        <p>@(style)</p>
                    </div>
                }
            </div>
        }

        <div>
            You have clicked: @(clicked ?? "Not yet")<br />
            Selected (Toggle button): @selected.ToString()<br />
            Toggle changed count: @(toggleCount)
        </div>
    </ComponentDemo>
    <Tweaks>
        <Stack>
            <span>Button Function:</span>

            <MdRadioGroup @bind-Value="function" @bind-Value:after="SetTo"
                          Name="opt-function">
                <Stack>
                    <LabeledRadio Value="@("Button")" />
                    <LabeledRadio Value="@("Toggle")" />
                    <LabeledRadio Value="@("Link")" />
                </Stack>
            </MdRadioGroup>

            <label>
                <MdCheckbox @bind-Checked="targetBlank" Disabled="@(!hasHref)" />
                Set target <code>_blank</code>
            </label>
        </Stack>

        <Stack>
            <LabeledSwitch @bind-Selected="disabled" Disabled="@(hasHref)" Label="Disabled" />
        </Stack>
    </Tweaks>
</ComponentDemoPage>

@code {
    const string icon = "send";

    string function = "Button";
    bool selected;
    bool disabled;

    string? clicked;

    bool button = true;
    bool toggle;
    bool hasHref;

    bool targetBlank;

    int toggleCount;

    void SetTo()
    {
        button = function == "Button";
        toggle = function == "Toggle";
        hasHref = function == "Link";
        Console.WriteLine(function);
    }

}