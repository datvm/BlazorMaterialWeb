@page "/button"

@inject IJSRuntime Js;

<ComponentDemoPage Name="Buttons"
                   DesignUrl="https://m3.material.io/components/buttons/overview"
                   ComponentUrl="https://material-web.dev/components/button/"
                   ComponentSourcePath="button"
                   BlazorComponentSourcePath="MdButton.razor"
                   BlazorDemoSourceName="Button">
    <Description>
        Common buttons prompt most actions in a UI
    </Description>
    <ComponentDemo>
        <div>
            <MarkdownBlock>
                **[Components merging](/features#components-merging)**:
                All button types
                (`md-elevated-button`, `md-filled-button`, `md-filled-tonal-button`, `md-outlined-button`, `md-text-button`)
                are merged into a single `MdButton` and you can use
                `ButtonStyle` parameter to set the style.
                `MdButtonStype.Elevated` is the default value if unset.
            </MarkdownBlock>
        </div>

        <div class="row text-center">
            @foreach (var type in Enum.GetValues<MdButtonStype>())
            {
                <div class="col">
                    <MdButton @onclick="@(() => clickedType = type.ToString())"
                              Disabled="@(disabled)"
                              ButtonStyle="@(type)"
                              TrailingIcon="@(trailingIcon)"
                              Href="@(hasHref ? "https://example.com" : null)"
                              Target="@(hasHref && targetBlank ? "_blank" : "")"
                              HasIcon="hasIcon">
                        @(type.ToString())

                        @if (!string.IsNullOrEmpty(icon))
                        {
                            <MdIcon slot="@(MdButton.IconSlot)">@(icon)</MdIcon>
                        }
                    </MdButton>
                </div>
            }
        </div>

        @if (clickedType is null)
        {
            <p>You haven't clicked any button</p>
        }
        else
        {
            <p>You clicked: @(clickedType)</p>
        }

        <div>
            <MdButton @ref="refDemo" @onclick="PrintHtmlRefAsync">
                Print to Console (ElementReference demo)
            </MdButton>
        </div>
    </ComponentDemo>
    <Tweaks>
        <div>
            <LabeledSwitch @bind-Selected="disabled" Label="Disabled" />
            <div>
                Does not work on linked button (buttons with <code>Href</code> parameter).
                Unlike List, <code>Disabled</code> actually prevent <code>@@onclick</code> event
                from firing.
            </div>
        </div>


        <div class="hstack gap-3">
            <LabeledSwitch @bind-Selected="hasHref" Label="Has Href" />

            <label>
                <MdCheckbox @bind-Checked="targetBlank" Disabled="@(!hasHref)" />
                Set Target to _blank
            </label>
        </div>

        <div class="hstack gap-3">
            <label class="flex-shrink-0">
                <MdCheckbox @bind-Checked="hasIcon" />
                Has Icon
            </label>

            <label class="flex-shrink-0">
                <MdCheckbox @bind-Checked="trailingIcon" />
                Trailing Icon
            </label>

            <MdTextField @bind-Value="icon"
                         Label="Icon"
                         class="w-100"
                         SupportingText="Apparently HasIcon only affects the button layout. It still renders the icon if you give it the icon slot.">
                <MdIcon slot="leading-icon">Emoticon</MdIcon>
            </MdTextField>
        </div>
    </Tweaks>
</ComponentDemoPage>

@code {

    bool disabled;
    string? clickedType;
    string icon = "send";

    bool hasIcon = true;
    bool trailingIcon;

    bool hasHref;
    bool targetBlank = true;

    MdButton refDemo = null!;

    async Task PrintHtmlRefAsync()
    {
        await Js.InvokeVoidAsync("console.log", refDemo.ElementReference);
    }

}