@page "/progress"

<ComponentDemoPage Name="Progress indicators"
                   DesignUrl="https://m3.material.io/components/progress-indicators/overview"
                   ComponentUrl="https://material-web.dev/components/progress/"
                   ComponentSourcePath="progress"
                   BlazorComponentSourcePath="MdProgress.razor"
                   BlazorDemoSourceName="Progress">
    <Description>
        Progress indicators show the status of a process in real time
    </Description>
    <ComponentDemo>
        <div>
            <MarkdownBlock>
                **[Components merging](/features#components-merging)**:
                All progress indicator types
                (`md-circular-progress` and `md-linear-progress`)
                are merged into a single `MdProgress` and you can use
                `ProgressStyle` parameter to set the style.
                `MdProgressStyle.Linear` is the default value if unset.

                `Buffer` property is ignored by `MdProgressStyle.Circular`.
            </MarkdownBlock>
        </div>

        <div class="row align-items-center text-center">
            @foreach (var style in Enum.GetValues<MdProgressStyle>())
            {
                <div class="col">
                    <MdProgress ProgressStyle="@(style)"
                                Indeterminate="indeterminate"
                                FourColor="fourColor"
                                Value="value" Max="max"
                                Buffer="buffer"
                                class="@(style == MdProgressStyle.Linear ? "w-100": null)" />
                </div>
            }
        </div>

        <div class="text-center">
            Value = @(value), Max = @(max), Buffer = @(buffer) (Linear only)
        </div>
    </ComponentDemo>
    <Tweaks>
        <Stack>
            <LabeledSwitch @bind-Selected="indeterminate" Label="Indeterminate" />

            <label>
                <MdCheckbox @bind-Checked="@(fourColor)" Disabled="!indeterminate" />
                Four colors
            </label>
        </Stack>

        <MdButton ButtonStyle="MdButtonStype.Filled" @onclick="SimulateProgress">
            Simulate Progress
        </MdButton>
    </Tweaks>
</ComponentDemoPage>

@code {

    double value = 25;
    double max = 100;
    double buffer = 90;

    bool indeterminate;
    bool fourColor;

    async Task SimulateProgress()
    {
        indeterminate = false;

        var rnd = Random.Shared;
        max = rnd.Next(75, 300);
        value = 0;
        buffer = Math.Floor(max / 4);
        StateHasChanged();

        while (value < max)
        {
            await Task.Delay(200);

            var increase = rnd.Next(1, 10);
            buffer = Math.Min(max, buffer + increase);

            increase = rnd.Next(1, 10);
            value = Math.Min(buffer, value + increase);

            StateHasChanged();
        }
    }

}