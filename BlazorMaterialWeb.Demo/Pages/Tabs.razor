@page "/tabs"

@inject IJSRuntime Js;

<ComponentDemoPage Name="Tabs"
                   DesignUrl="https://m3.material.io/components/tabs/overview"
                   ComponentUrl="https://material-web.dev/components/tabs/"
                   ComponentSourcePath="tabs"
                   BlazorComponentSourcePath="Tabs"
                   BlazorDemoSourceName="Tabs">
    <Description>
        Tabs organize content across different screens and views
    </Description>
    <ComponentDemo>
        <div>
            <MarkdownBlock>
                **[Components merging](/features#components-merging)**:
                All Tab components
                (`md-primary-tab` and `md-secondary-tab`)
                are merged into a single `MdTab`:
                - You can use `Type` parameter to set the type. `MdTabType.Primary` is the default value if unset.
                - You can also set the `Type` on `MdTabs` and it's cascaded into all children `MdTab`s.
                You can override it at the child component but there's no need to do so in most cases.
                - `inline-icon` is ignored by Secondary tabs.
            </MarkdownBlock>

            <span>
                <strong>
                    <MdIconInline>warning</MdIconInline>
                    Note:
                </strong>
            </span>

            <MarkdownBlock>
                `MdTab`'s `ActiveChanged` event is only fired when a tab is selected.
                It's not possible to know when a tab is deactivated without additional Javascript.
                `@@bind-Active` is therefore unreliable (`Active` remains `true` after user selects another tab).
            </MarkdownBlock>
        </div>

        @foreach (var tabType in Enum.GetValues<MdTabType>())
        {
            <div>
                <p>@(tabType) Tabs</p>

                <MdTabs @ref="tabRefs[tabType]" TabType="@(tabType)" OnTabChanged="OnTabChanged">
                    @foreach (var (icon, text) in DemoTabs)
                    {
                        <MdTab InlineIcon="inlineIcon" IconOnly="@(!showLabel)">
                            @if (showIcon)
                            {
                                <MdIcon slot="@(MdTab.IconSlot)">@(icon)</MdIcon>
                            }

                            @if (showLabel)
                            {
                                @(text)
                            }
                        </MdTab>
                    }

                    @for (int i = 0; i < customTabs; i++)
                    {
                        var z = i + 1;
                        <MdTab>
                            @if (showIcon)
                            {
                                <MdIcon slot="@(MdTab.IconSlot)">add_circle</MdIcon>

                                @if (showLabel)
                                {
                                    @: Custom Tab @(z)
                                }
                            }
                        </MdTab>
                    }
                </MdTabs>
            </div>
        }

        <p>
            Recently selected tab index (<code>OnTabChanged</code> event of <code>MdTabs</code>):
            @(activeTabIndex?.ToString() ?? "None yet")
        </p>
    </ComponentDemo>
    <Tweaks>
        <Stack>
            <LabeledSwitch @bind-Selected="showLabel" Label="Show labels" />
            <LabeledSwitch @bind-Selected="showIcon" Label="Show icons" />
            <LabeledSwitch @bind-Selected="inlineIcon" Label="Inline icons" Disabled="@(!showIcon)" />
        </Stack>

        <Stack>
            <MdButton @onclick="Add3Tabs">
                Add 3 tabs
            </MdButton>

            <MdButton @onclick="Select3rdTabs">
                Programmatically select the 3rd tabs
            </MdButton>

            <MdButton @onclick="GetAndSelectTab">
                Programmatically get the 2nd tab then select it
            </MdButton>
        </Stack>
    </Tweaks>
</ComponentDemoPage>



@code {

    static readonly (string, string)[] DemoTabs =
    {
        ("Videocam", "Video"),
        ("photo", "Photos"),
        ("music_note", "Audio"),
    };

    Dictionary<MdTabType, MdTabs> tabRefs = new();

    bool showIcon = true;
    bool showLabel = true;

    bool inlineIcon;

    int? activeTabIndex;
    int customTabs = 0;

    void Add3Tabs() => customTabs += 3;

    void OnTabChanged(MdTabChangeEventArgs e)
    {
        activeTabIndex = e.Index;
    }

    async Task Select3rdTabs()
    {
        foreach (var t in tabRefs.Values)
        {
            await t.SetActiveTabIndexAsync(2);
        }
    }

    async Task GetAndSelectTab()
    {
        foreach (var t in tabRefs.Values)
        {
            var tabs = await t.GetTabsAsync();

            var secondTab = await tabs.GetItemAsync(1);
            await t.SetActiveTabAsync(secondTab);
        }
    }

}